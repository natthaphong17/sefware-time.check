Index: src/app/dialog/working-time-perview/working-time-perview.component.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/app/dialog/working-time-perview/working-time-perview.component.html	(date 1516244693711)
+++ src/app/dialog/working-time-perview/working-time-perview.component.html	(date 1516244693711)
@@ -0,0 +1,5 @@
+<td-layout-nav toolbarTitle="Time Check In-Out" class="container">
+  <button mat-icon-button td-menu-button mat-dialog-close>
+    <mat-icon>arrow_back</mat-icon>
+  </button>
+</td-layout-nav>
Index: src/app/dialog/working-time-perview/working-time-perview.component.scss
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/app/dialog/working-time-perview/working-time-perview.component.scss	(date 1516244693777)
+++ src/app/dialog/working-time-perview/working-time-perview.component.scss	(date 1516244693777)
@@ -0,0 +1,134 @@
+:host /deep/ {
+  .btn-back{
+    position: absolute;
+    top: 0;
+    left: 0;
+  }
+
+  .mat-form-field-subscript-wrapper {
+    font-size: 70%;
+    margin-top: 0.54167em;
+    top: calc(100% - 1.96667em);
+  }
+
+  .container {
+    background-color: #e0e0e0;
+  }
+
+  .data-table {
+
+    .datatable-header:hover {
+      .datatable-header-cell {
+        border-right: 1px solid var(--divider-color);
+      }
+    }
+
+    datatable-selection {
+      //display: none;
+    }
+
+    .empty-row {
+      display: none;
+    }
+
+    & .datatable-scroll {
+      width: 100% !important;
+    }
+
+    .datatable-header {
+      border-top: 1px solid rgba(0, 0, 0, 0.12);
+      border-bottom: 1px solid rgba(0, 0, 0, 0.12);
+      background: #f5f5f5;
+      width: 100% !important;
+    }
+
+    .datatable-header-cell {
+      color: rgba(0, 0, 0, 0.54);
+      cursor: pointer;
+      outline: none;
+      font-size: 0.75rem;
+      padding: 8px 15px;
+      font-weight: 500;
+      text-align: left;
+
+      .sort-active {
+        color: rgba(0, 0, 0, 0.87) !important;
+      }
+
+      .text-center {
+        text-align: center;
+      }
+    }
+
+    .datatable-body-cell {
+      color: rgba(0, 0, 0, 0.54);
+      font-size: 13px;
+      line-height: 16px;
+      height: 48px;
+      padding: 0;
+      border-bottom: 1px solid rgba(0, 0, 0, 0.08);
+      white-space: nowrap;
+
+    }
+
+    .datatable-body .datatable-body-row {
+      outline: none;
+      :hover {
+        background: #eee;
+      }
+    }
+
+    .active {
+      background: transparent !important;
+    }
+
+    .datatable-header .resize-handle {
+      border-right: solid 1px #eee;
+    }
+
+    .text-truncate {
+      white-space: nowrap;
+      overflow: hidden;
+      text-overflow: ellipsis;
+      width: inherit;
+      position: relative;
+      z-index: 4;
+      padding: 10px 15px;
+      overflow: hidden;
+      text-overflow: ellipsis;
+      white-space: nowrap;
+    }
+
+  }
+
+  .search-bar {
+    background-color: #f5f5f5;
+    color: rgb(255, 255, 255);
+  }
+
+  td-search-box {
+    color: rgb(255, 255, 255);
+    display: block;
+    font-size: 16px;
+  }
+
+  .status-active {
+    color: #fff;
+    background: #009688 !important;
+    height: 24px;
+  }
+
+  .status-inactive {
+    background: #e0e0e0 !important;
+    height: 24px;
+  }
+
+  .link {
+    color: var(--accent-color);
+    cursor: pointer;
+  }
+
+  .link:hover {
+    text-decoration: underline;
+  }
+}
Index: src/app/dialog/working-time-perview/working-time-perview.component.spec.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/app/dialog/working-time-perview/working-time-perview.component.spec.ts	(date 1516244348256)
+++ src/app/dialog/working-time-perview/working-time-perview.component.spec.ts	(date 1516244348256)
@@ -0,0 +1,25 @@
+import { async, ComponentFixture, TestBed } from '@angular/core/testing';
+
+import { WorkingTimePerviewComponent } from './working-time-perview.component';
+
+describe('WorkingTimePerviewComponent', () => {
+  let component: WorkingTimePerviewComponent;
+  let fixture: ComponentFixture<WorkingTimePerviewComponent>;
+
+  beforeEach(async(() => {
+    TestBed.configureTestingModule({
+      declarations: [ WorkingTimePerviewComponent ]
+    })
+    .compileComponents();
+  }));
+
+  beforeEach(() => {
+    fixture = TestBed.createComponent(WorkingTimePerviewComponent);
+    component = fixture.componentInstance;
+    fixture.detectChanges();
+  });
+
+  it('should create', () => {
+    expect(component).toBeTruthy();
+  });
+});
Index: src/app/dialog/working-time-perview/working-time-perview.component.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/app/dialog/working-time-perview/working-time-perview.component.ts	(date 1516244348258)
+++ src/app/dialog/working-time-perview/working-time-perview.component.ts	(date 1516244348258)
@@ -0,0 +1,15 @@
+import { Component, OnInit } from '@angular/core';
+
+@Component({
+  selector: 'app-working-time-perview',
+  templateUrl: './working-time-perview.component.html',
+  styleUrls: ['./working-time-perview.component.scss']
+})
+export class WorkingTimePerviewComponent implements OnInit {
+
+  constructor() { }
+
+  ngOnInit() {
+  }
+
+}
Index: src/app/setup/employee/employee-type-dialog/employee-type-dialog.component.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/app/setup/employee/employee-type-dialog/employee-type-dialog.component.html	(date 1516248711000)
+++ src/app/setup/employee/employee-type-dialog/employee-type-dialog.component.html	(date 1516248711000)
@@ -0,0 +1,306 @@
+<div align="center" style="vertical-align: inherit; padding: 10px;">
+  <form #dataForm="ngForm">
+    <div layout="row" align="center">
+      <!-- Col Left -->
+      <mat-card-content class="push-bottom-none" style="width: 50vw;margin: 10px;margin-bottom: 0px;">
+        <div layout="row">
+          <mat-form-field flex>
+            <input matInput
+                   #name1Element
+                   #name1Control="ngModel"
+                   placeholder="Name 1"
+                   [(ngModel)]="data.name1"
+                   name="name1"
+                   maxlength="250"
+                   required>
+            <mat-hint align="start">
+                <span [hidden]="name1Control.pristine" class="tc-red-600">
+                  <span [hidden]="!name1Control.hasError('required')">Required</span>
+                </span>
+            </mat-hint>
+            <mat-hint align="end">{{name1Element.value?.length || 0}} / 250</mat-hint>
+          </mat-form-field>
+        </div>
+
+        <div layout="row">
+          <mat-form-field flex>
+            <input matInput
+                   #name2Element
+                   #name2Control="ngModel"
+                   placeholder="Name 2"
+                   [(ngModel)]="data.name2"
+                   name="name2"
+                   maxlength="250"
+                   required>
+            <mat-hint align="start">
+              <span [hidden]="name2Control.pristine" class="tc-red-600">
+              <span [hidden]="!name2Control.hasError('required')">Required</span>
+              </span>
+            </mat-hint>
+            <mat-hint align="end">{{name2Element.value?.length || 0}} / 250</mat-hint>
+          </mat-form-field>
+        </div>
+
+        <div layout="row">
+          <mat-form-field flex>
+            <input matInput
+                   #name1Element
+                   #name1Control="ngModel"
+                   placeholder="Position"
+                   [(ngModel)]="data.position"
+                   name="position"
+                   maxlength="250"
+                   required>
+            <mat-hint align="start">
+                <span [hidden]="name1Control.pristine" class="tc-red-600">
+                  <span [hidden]="!name1Control.hasError('required')">Required</span>
+                </span>
+            </mat-hint>
+            <mat-hint align="end">{{name1Element.value?.length || 0}} / 250</mat-hint>
+          </mat-form-field>
+        </div>
+
+        <div layout="row">
+          <mat-form-field flex>
+            <input matInput
+                   #name1Element
+                   #name1Control="ngModel"
+                   placeholder="Salary"
+                   [(ngModel)]="data.salary"
+                   name="position"
+                   maxlength="250"
+                   required>
+            <mat-hint align="start">
+                <span [hidden]="name1Control.pristine" class="tc-red-600">
+                  <span [hidden]="!name1Control.hasError('required')">Required</span>
+                </span>
+            </mat-hint>
+            <mat-hint align="end">{{name1Element.value?.length || 0}} / 250</mat-hint>
+          </mat-form-field>&nbsp;
+
+          <mat-form-field flex>
+            <mat-select placeholder="Department"
+                        #typeControl="ngModel"
+                        [ngModelOptions]="{standalone: true}"
+                        [(ngModel)]="data.department"
+                        required>
+              <mat-option value="test">test</mat-option>
+              <mat-option value="12">12</mat-option>
+              <mat-option value="13">13</mat-option>
+              <mat-option value="14">14</mat-option>
+              <mat-option value="15">15</mat-option>
+            </mat-select>
+            <mat-hint align="end">
+                <span [hidden]="typeControl.pristine" class="tc-red-600">
+                  <span [hidden]="!typeControl.hasError('required')">Required</span>
+                </span>
+            </mat-hint>
+          </mat-form-field>&nbsp;
+        </div>
+
+        <div layout="row">
+          <mat-form-field flex>
+            <mat-select placeholder="Level"
+                        #typeControl="ngModel"
+                        [ngModelOptions]="{standalone: true}"
+                        [(ngModel)]="data.level"
+                        required>
+              <mat-option value="1">1</mat-option>
+              <mat-option value="2">2</mat-option>
+              <mat-option value="3">3</mat-option>
+              <mat-option value="4">4</mat-option>
+              <mat-option value="5">5</mat-option>
+            </mat-select>
+            <mat-hint align="end">
+                <span [hidden]="typeControl.pristine" class="tc-red-600">
+                  <span [hidden]="!typeControl.hasError('required')">Required</span>
+                </span>
+            </mat-hint>
+          </mat-form-field>&nbsp;
+
+          <mat-form-field flex>
+            <mat-select placeholder="Holidays"
+                        #typeControl="ngModel"
+                        [ngModelOptions]="{standalone: true}"
+                        [(ngModel)]="data.holidays"
+                        required>
+              <mat-option value="11">11</mat-option>
+              <mat-option value="12">12</mat-option>
+              <mat-option value="13">13</mat-option>
+              <mat-option value="14">14</mat-option>
+              <mat-option value="15">15</mat-option>
+            </mat-select>
+            <mat-hint align="end">
+                <span [hidden]="typeControl.pristine" class="tc-red-600">
+                  <span [hidden]="!typeControl.hasError('required')">Required</span>
+                </span>
+            </mat-hint>
+          </mat-form-field>&nbsp;
+
+        <mat-form-field flex>
+          <mat-select placeholder="Vacations"
+                      #typeControl="ngModel"
+                      [ngModelOptions]="{standalone: true}"
+                      [(ngModel)]="data.vacations"
+                      required>
+            <mat-option value="8">7</mat-option>
+            <mat-option value="8">8</mat-option>
+            <mat-option value="9">9</mat-option>
+            <mat-option value="10">10</mat-option>
+            <mat-option value="11">11</mat-option>
+          </mat-select>
+          <mat-hint align="end">
+                <span [hidden]="typeControl.pristine" class="tc-red-600">
+                  <span [hidden]="!typeControl.hasError('required')">Required</span>
+                </span>
+          </mat-hint>
+        </mat-form-field>
+        </div>
+
+        <div layout="row">
+          <mat-form-field flex>
+            <input matInput
+                   #name1Element
+                   #name1Control="ngModel"
+                   placeholder="Address"
+                   [(ngModel)]="data.address"
+                   name="address"
+                   maxlength="250"
+                   required>
+            <mat-hint align="start">
+                <span [hidden]="name1Control.pristine" class="tc-red-600">
+                  <span [hidden]="!name1Control.hasError('required')">Required</span>
+                </span>
+            </mat-hint>
+            <mat-hint align="end">{{name1Element.value?.length || 0}} / 250</mat-hint>
+          </mat-form-field>
+        </div>
+
+        <div layout="row">
+          <mat-form-field flex>
+            <input matInput
+                   #name1Element
+                   #name1Control="ngModel"
+                   placeholder="National ID"
+                   [(ngModel)]="data.nationalid"
+                   name="nationalid"
+                   maxlength="250"
+                   required>
+            <mat-hint align="start">
+                <span [hidden]="name1Control.pristine" class="tc-red-600">
+                  <span [hidden]="!name1Control.hasError('required')">Required</span>
+                </span>
+            </mat-hint>
+            <mat-hint align="end">{{name1Element.value?.length || 0}} / 250</mat-hint>
+          </mat-form-field>
+        </div>
+
+      </mat-card-content>
+      <!-- End Col Left -->
+
+      <!-- Col Right -->
+      <mat-card-content class="push-bottom-none" style="width: 50vw;margin: 10px;margin-bottom: 0px;">
+        <div class="grid" style="text-align: center">
+          <div *ngFor="let image of images; let i = index">
+            <img height="200px" [src]="image.src" (click)="gallery.set(i)"/>
+          </div>
+        </div>
+        <div fxLayout="row" style="margin: 10px;text-align: center">
+          <span fxFlex></span>
+          <input #upload hidden accept="image/*" type="file" tdFileSelect (fileSelect)="uploadImage($event)">
+          <a mat-raised-button class="text-upper" color="primary" (click)="upload.click()">Upload</a>
+          <a mat-button class="text-upper" style="margin-left: 10px;" (click)="removeImage()" [disabled]="data.image === '../../../../../assets/images/placeholder.png'?true:false">Remove</a>
+          <span fxFlex></span>
+        </div>
+
+        <div layout="row" style="margin-top: 25px">
+          <mat-form-field style="width: 100px;margin: 10px;" flex>
+            <input matInput
+                   type="text"
+                   style="text-align: end;"
+                   #minimumElement
+                   #minimumControl="ngModel"
+                   placeholder="ID"
+                   [(ngModel)]="data.id"
+                   name="min"
+                   maxlength="4">
+            <mat-hint align="start">
+              <span [hidden]="minimumControl.pristine" class="tc-red-600">
+              <span [hidden]="!minimumControl.hasError('required')">Required</span>
+              </span>
+            </mat-hint>
+            <mat-hint align="end">{{minimumElement.value?.length || 0}} / 8</mat-hint>
+          </mat-form-field>
+
+          <mat-form-field style="width: 100px;margin: 10px;" flex>
+            <input matInput
+                   type="text"
+                   style="text-align: end;"
+                   #maximumElement
+                   #maximumControl="ngModel"
+                   placeholder="PIN"
+                   [(ngModel)]="data.pin"
+                   name="max"
+                   maxlength="6">
+            <mat-hint align="start">
+              <span [hidden]="maximumControl.pristine" class="tc-red-600">
+              <span [hidden]="!maximumControl.hasError('required')">Required</span>
+              </span>
+            </mat-hint>
+            <mat-hint align="end">{{maximumElement.value?.length || 0}} / 8</mat-hint>
+          </mat-form-field>
+        </div>
+
+      </mat-card-content>
+    </div>
+    <!-- End Col Right -->
+
+    <!-- Unit -->
+    <!--<div layout="row" align="center">
+      <mat-card-content class="push-bottom-none" style="width: 50vw;margin: 10px;margin-top: 0px;">
+        <div layout="row">
+          <mat-form-field flex>
+            <mat-select placeholder="Primary Unit"
+                        #primaryUnitControl="ngModel"
+                        [ngModelOptions]="{standalone: true}"
+                        [(ngModel)]="data.primary_unit" (change)="changePrimaryUnit(data.primary_unit)">
+              <mat-option *ngFor="let uom of uoms" [value]="uom.code">{{uom.code}} : {{uom.name1}} ({{uom.shortname}})</mat-option>
+            </mat-select>
+            <mat-hint align="start">
+              <span [hidden]="primaryUnitControl.pristine" class="tc-red-600">
+                <span [hidden]="!primaryUnitControl.hasError('required')">Required</span>
+              </span>
+            </mat-hint>
+          </mat-form-field>
+        </div>
+      </mat-card-content>
+
+      <mat-card-content class="push-bottom-none" style="width: 50vw;margin: 10px;margin-top: 0px;">
+        <div layout="row">
+          <mat-form-field flex>
+            <mat-select placeholder="Secondary Unit"
+                        #secondaryUnitControl="ngModel"
+                        [ngModelOptions]="{standalone: true}"
+                        [(ngModel)]="data.secondary_unit">
+              <mat-option *ngFor="let uom of uoms" [value]="uom.code">{{uom.code}} : {{uom.name1}} ({{uom.shortname}})</mat-option>
+            </mat-select>
+            <mat-hint align="start">
+                <span [hidden]="secondaryUnitControl.pristine" class="tc-red-600">
+                  <span [hidden]="!secondaryUnitControl.hasError('required')">Required</span>
+                </span>
+            </mat-hint>
+          </mat-form-field>
+        </div>
+      </mat-card-content>
+    </div>-->
+  </form>
+
+  <mat-divider style="margin:10px"></mat-divider>
+  <!-- Footer -->
+  <mat-card-footer style="margin: 0px 10px;align-content: center;">
+    <button mat-button class="text-upper" mat-dialog-close>Cancel</button>
+    <button mat-button class="text-upper" [disabled]="!dataForm.form.valid" color="primary"
+            (click)="saveData(dataForm.form)">Save
+    </button>
+  </mat-card-footer>
+</div>
Index: src/app/setup/employee/employee-type-dialog/employee-type-dialog.component.scss
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/app/setup/employee/employee-type-dialog/employee-type-dialog.component.scss	(date 1516248711000)
+++ src/app/setup/employee/employee-type-dialog/employee-type-dialog.component.scss	(date 1516248711000)
@@ -0,0 +1,50 @@
+:host /deep/ {
+  .btn-back{
+    position: absolute;
+    top: 0;
+    left: 0;
+  }
+
+  .mat-form-field-subscript-wrapper {
+    font-size: 70%;
+    margin-top: 0.54167em;
+    top: calc(100% - 1.96667em);
+  }
+
+  .container {
+    background-color: #e0e0e0;
+  }
+
+  .list-title{
+    color: rgba(0,0,0,.87);
+    font-size: 1rem;
+  }
+
+  .list-detail{
+    color: rgba(0,0,0,.38);
+    font-size: 0.89rem;
+  }
+
+  .link {
+    color: var(--accent-color);
+    cursor: pointer;
+  }
+
+  .link:hover {
+    text-decoration: underline;
+  }
+  .form {
+    min-width: 150px;
+    max-width: 500px;
+    min-height: 150px;
+    max-height: 500px;
+    width: 100%;
+    height: 100%;
+  }
+  .full-width {
+    width: 100%;
+  }
+  .mat-grid-tile {
+    background: lightblue;
+  }
+}
Index: src/app/setup/employee/employee-type-dialog/employee-type-dialog.component.spec.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/app/setup/employee/employee-type-dialog/employee-type-dialog.component.spec.ts	(date 1516248711000)
+++ src/app/setup/employee/employee-type-dialog/employee-type-dialog.component.spec.ts	(date 1516248711000)
@@ -0,0 +1,25 @@
+import { async, ComponentFixture, TestBed } from '@angular/core/testing';
+
+import { EmployeeTypeDialogComponent } from './employee-type-dialog.component';
+
+describe('EmployeeTypeDialogComponent', () => {
+  let component: EmployeeTypeDialogComponent;
+  let fixture: ComponentFixture<EmployeeTypeDialogComponent>;
+
+  beforeEach(async(() => {
+    TestBed.configureTestingModule({
+      declarations: [ EmployeeTypeDialogComponent ]
+    })
+    .compileComponents();
+  }));
+
+  beforeEach(() => {
+    fixture = TestBed.createComponent(EmployeeTypeDialogComponent);
+    component = fixture.componentInstance;
+    fixture.detectChanges();
+  });
+
+  it('should create', () => {
+    expect(component).toBeTruthy();
+  });
+});
Index: src/app/setup/employee/employee-type-dialog/employee-type-dialog.component.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/app/setup/employee/employee-type-dialog/employee-type-dialog.component.ts	(date 1516248711000)
+++ src/app/setup/employee/employee-type-dialog/employee-type-dialog.component.ts	(date 1516248711000)
@@ -0,0 +1,137 @@
+import {Component, Inject, OnInit} from '@angular/core';
+import {MAT_DIALOG_DATA, MatDialogRef, MatDialog, MatFormFieldModule} from '@angular/material';
+import {GalleryConfig, Gallery} from 'ng-gallery';
+import {Upload} from '../../../shared/model/upload';
+import {UploadService} from '../../../services/upload.service';
+import {Language} from 'angular-l10n';
+import {TdLoadingService} from '@covalent/core';
+import * as _ from 'lodash';
+import { FormControl } from '@angular/forms';
+import {EmployeeType} from '../employee-type';
+import {EmployeeTypeService} from '../employee-type.service';
+
+@Component({
+  selector: 'app-settings-item-type-dialog',
+  templateUrl: './employee-type-dialog.component.html',
+  styleUrls: ['./employee-type-dialog.component.scss'],
+  providers: [EmployeeTypeService, UploadService]
+})
+
+export class EmployeeTypeDialogComponent implements OnInit {
+  @Language() lang: string;
+  config: GalleryConfig;
+
+  data: EmployeeType = new EmployeeType({});
+  disableSelect = new FormControl(true);
+  error: any;
+  images = [];
+  storage_ref = '/main/settings/employee';
+
+  constructor(@Inject(MAT_DIALOG_DATA) public md_data: EmployeeType,
+              private _employeetypeService: EmployeeTypeService,
+              private _loadingService: TdLoadingService,
+              private _uploadService: UploadService,
+              public gallery: Gallery,
+              public dialogRef: MatDialogRef<EmployeeTypeDialogComponent>) {
+
+    try {
+      if (md_data) {
+        this.data = new EmployeeType(md_data);
+        if (!this.data.image) {
+          this.displayImage('../../../../../assets/images/user.png');
+        } else {
+          this.displayImage(this.data.image);
+        }
+
+      } else {
+        this.displayImage('../../../../../assets/images/user.png');
+        this._employeetypeService.requestData().subscribe(() => {
+          this.generateCode();
+        });
+      }
+    } catch (error) {
+      this.error = error;
+    }
+  }
+
+  ngOnInit(): void {
+  }
+  displayImage(path: string) {
+    this.images = [];
+    this.images.push({
+      src: path,
+      thumbnail: path,
+      text: this.data.name1
+    });
+    this.gallery.load(this.images);
+  }
+  generateCode() {
+    this._loadingService.register('data.form');
+    // const prefix = 'TYPE';
+    // this.data.id = prefix + '1001';
+    this._employeetypeService.requestLastData().subscribe((s) => {
+      s.forEach((ss: EmployeeType) => {
+        console.log('Prev Code :' + ss.id);
+        // tslint:disable-next-line:radix
+        const str = parseInt(ss.id.substring(ss.id.length - 1, ss.id.length)) + 1;
+        const last = '' + str;
+
+        /*let last = prefix + '-' + str;
+
+        if (str < 100) {
+          last = prefix + '-0' + str;
+        }
+
+        if (str < 10) {
+          last = prefix + '-00' + str;
+        }*/
+
+        this.data.id = last;
+      });
+      this._loadingService.resolve('data.form');
+    });
+  }
+
+  saveData(form) {
+
+    if (form.valid) {
+
+      this.error = false;
+      this._loadingService.register();
+
+      this.data.name1 = form.value.name1 ? form.value.name1 : null;
+
+      if (this.md_data) {
+        if (_.isEqual(this.data, this.md_data)) {
+          this.dialogRef.close(false);
+        } else {
+          this._employeetypeService.updateData(this.data).then(() => {
+            this.dialogRef.close(this.data);
+            this._loadingService.resolve();
+          }).catch((err) => {
+            this.error = err.message;
+            this._loadingService.resolve();
+          });
+        }
+      } else {
+        this._employeetypeService.addData(this.data).then(() => {
+          this.dialogRef.close(this.data);
+          this._loadingService.resolve();
+        }).catch((err) => {
+          this.error = err.message;
+          this._loadingService.resolve();
+        });
+      }
+    }
+  }
+
+  disableSelectChange() {
+    this.data.disableSelect = this.disableSelect.value;
+    console.log('Func Active is : ' + this.data.disableSelect);
+  }
+
+  openLink(link: string) {
+    window.open(link, '_blank');
+  }
+
+}
Index: src/app/setup/employee/employee-type.service.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/app/setup/employee/employee-type.service.ts	(date 1516248711000)
+++ src/app/setup/employee/employee-type.service.ts	(date 1516248711000)
@@ -0,0 +1,75 @@
+import {Injectable} from '@angular/core';
+import {AngularFireDatabase, FirebaseListObservable} from 'angularfire2/database-deprecated';
+import {Page} from '../../shared/model/page';
+import {Observable} from 'rxjs';
+import {PagedData} from '../../shared/model/paged-data';
+import {EmployeeType} from './employee-type';
+
+@Injectable()
+export class EmployeeTypeService {
+
+  lists: FirebaseListObservable<any>;
+  rows: EmployeeType[] = [];
+  _path: string = '/main/settings/employee';
+
+  constructor(private agFb: AngularFireDatabase) {
+    this.lists = agFb.list(this._path, {preserveSnapshot: true});
+  }
+
+  getPath(): string {
+    return this._path;
+  }
+
+  requestData() {
+    return this.lists;
+  }
+
+  requestDataByCode(id: string) {
+    return this.agFb.object(this._path + '/' + id);
+  }
+
+  addData(data: EmployeeType) {
+    return this.lists.update(data.id, data);
+  }
+
+  updateData(data: EmployeeType) {
+    return this.lists.update(data.id, data);
+  }
+
+  updateDataStatus(data: EmployeeType, active: boolean) {
+    return this.lists.update(data.id, {
+      disable: active
+    });
+  }
+
+  removeData(data: EmployeeType) {
+    return this.lists.remove(data.id);
+  }
+
+  requestLastData() {
+    return this.agFb.list(this._path, {
+      query: {
+        limitToLast: 1
+      }
+    });
+  }
+
+  public getResults(page: Page): Observable<PagedData<EmployeeType>> {
+    return Observable.of(this.rows).map((data) => this.getPagedData(page));
+  }
+
+  private getPagedData(page: Page): PagedData<EmployeeType> {
+    const pagedData = new PagedData<EmployeeType>();
+    page.totalElements = this.rows.length;
+    page.totalPages = page.totalElements / page.size;
+    const start = page.pageNumber * page.size;
+    const end = Math.min((start + page.size), page.totalElements);
+    for (let i = start; i < end; i++) {
+      const jsonObj = this.rows[i];
+      pagedData.data.push(new EmployeeType(jsonObj));
+    }
+    pagedData.page = page;
+    return pagedData;
+  }
+
+}
Index: src/app/setup/employee/employee-type.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/app/setup/employee/employee-type.ts	(date 1516249991883)
+++ src/app/setup/employee/employee-type.ts	(date 1516249991883)
@@ -0,0 +1,25 @@
+export class EmployeeType {
+  id?: string = 'N/A';
+  image? = '../../../../../assets/images/placeholder.png';
+  name1?: string | null | undefined;
+  name2?: string | null | undefined;
+  position?: string | null | undefined;
+  level?: string | null | undefined;
+  holidays?: string | null | undefined;
+  vacations?: string | null | undefined;
+  // account?: string | null | undefined;
+  address?: string | null | undefined;
+  // bank?: string | null | undefined;
+  // mobile?: string | null | undefined;
+  nationalid?: string | null | undefined;
+  // phon?: string | null | undefined;
+  picture?: string | null | undefined;
+  salary?: string | null | undefined;
+  pin?: string | null | undefined;
+  department?: string | null | undefined;
+  disableSelect?: boolean = true;
+
+  constructor(params: EmployeeType) {
+    Object.assign(this, params);
+  }
+}
Index: src/app/setup/employee/employee.component.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/app/setup/employee/employee.component.html	(date 1516248711000)
+++ src/app/setup/employee/employee.component.html	(date 1516248711000)
@@ -0,0 +1,161 @@
+<td-layout-nav toolbarTitle="Employee Type" class="container">
+  <button mat-icon-button td-menu-button mat-dialog-close>
+    <mat-icon>arrow_back</mat-icon>
+  </button>
+  <div td-toolbar-content layout="row" layout-align="start center" flex>
+    <span flex></span>
+    <td-search-box #searchBox (keyup)='updateFilter($event)' (clear)="updateFilter('')" backIcon="search"
+                   class="btn-icon" placeholder="Filter by any keyword" flex>
+    </td-search-box>
+
+    <span>
+        <a mat-icon-button mat-tooltip="History" class="btn-icon push-right-sm" (click)="openLogs(null)"><mat-icon>history</mat-icon></a>
+    </span>
+  </div>
+
+  <td-layout-card-over cardTitle="Employee Type Setup" cardSubtitle="">
+    <mat-divider></mat-divider>
+
+    <mat-card-actions>
+      <button mat-button class="text-upper" color="primary" (click)="addData()">
+        <mat-icon>add</mat-icon> Add</button>
+      <!--<button mat-button class="text-upper" color="warn">
+        <mat-icon>delete_forever</mat-icon> Delete</button>-->
+    </mat-card-actions>
+
+    <mat-card-content style="padding-top: 0px;">
+      <ngx-datatable
+        #dataTable
+        class="data-table"
+        [rows]="rows"
+        [columnMode]="'force'"
+        [headerHeight]="35"
+        [scrollbarH]="true"
+        [rowHeight]="'auto'"
+        [sorts]="[{prop: 'prop', dir: 'desc'}]"
+        [limit]="page.size"
+      >
+
+        <ngx-datatable-column name="No."
+                              [width]="25"
+                              [sortable]="false">
+          <ng-template let-rowIndex="rowIndex" let-row="row" ngx-datatable-cell-template>
+            <div style="text-align: left" class="text-truncate">
+              {{rowIndex+1}}.
+            </div>
+          </ng-template>
+        </ngx-datatable-column>
+
+        <ngx-datatable-column
+          prop="code"
+          name="ID"
+          [minWidth]="50"
+          [width]="75">
+          <ng-template let-row="row" ngx-datatable-cell-template>
+            <div style="text-align: left" class="text-truncate">
+              {{row.id}}
+            </div>
+          </ng-template>
+        </ngx-datatable-column>
+
+        <ngx-datatable-column
+          prop="code"
+          name="Employee Name 1"
+          [minWidth]="50"
+          [width]="155">
+          <ng-template let-row="row" ngx-datatable-cell-template>
+            <div style="text-align: left" class="text-truncate">
+              {{row.name1}}
+            </div>
+          </ng-template>
+        </ngx-datatable-column>
+
+        <ngx-datatable-column
+          [width]="150"
+          [canAutoResize]="true"
+          prop="name1"
+          name="Employee Name 2">
+          <ng-template let-row="row" ngx-datatable-cell-template>
+            <div style="text-align: left" class="text-truncate">
+              {{row.name2}}
+            </div>
+          </ng-template>
+        </ngx-datatable-column>
+
+        <ngx-datatable-column
+          [width]="150"
+          [canAutoResize]="true"
+          prop="name2"
+          name="Position">
+          <ng-template let-row="row" ngx-datatable-cell-template>
+            <div style="text-align: left" class="text-truncate">
+              {{row.position}}
+            </div>
+          </ng-template>
+        </ngx-datatable-column>
+
+        <ngx-datatable-column
+          [width]="30"
+          prop="disable"
+          name="Level">
+          <ng-template let-row="row" ngx-datatable-cell-template>
+            <div style="text-align: left" class="text-truncate">
+              {{row.level}}
+            </div>
+          </ng-template>
+        </ngx-datatable-column>
+
+        <ngx-datatable-column
+          [width]="50"
+          prop="disable"
+          name="Holidays">
+          <ng-template let-row="row" ngx-datatable-cell-template>
+            <div style="text-align: left" class="text-truncate">
+              {{row.holidays}}
+            </div>
+          </ng-template>
+        </ngx-datatable-column>
+
+        <ngx-datatable-column
+          [width]="60"
+          prop="disable"
+          name="Vacations">
+          <ng-template let-row="row" ngx-datatable-cell-template>
+            <div style="text-align: left" class="text-truncate">
+              {{row.vacations}}
+            </div>
+          </ng-template>
+        </ngx-datatable-column>
+
+        <ngx-datatable-column name="Action"
+                              [width]="100"
+                              [resizeable]="false"
+                              [sortable]="false">
+          <ng-template let-row="row" ngx-datatable-cell-template>
+            <div style="text-align: center;" fxLayout="row">
+              <button mat-icon-button mat-tooltip="Edit" class="" (click)="editData(row)">
+                <mat-icon>edit</mat-icon>
+              </button>
+              <button mat-icon-button class="" mat-tooltip="Delete" (click)="deleteData(row)">
+                <mat-icon>remove_circle_outline</mat-icon>
+              </button>
+            </div>
+          </ng-template>
+        </ngx-datatable-column>
+
+      </ngx-datatable>
+
+      <div class="mat-padding" *ngIf="rows?.length === 0 && !loading" layout="row" layout-align="center center">
+        <h3>No data to display.</h3>
+      </div>
+      <mat-paginator #paginator
+                     [length]="page.totalElements"
+                     [pageIndex]="page.pageNumber"
+                     [pageSize]="page.size"
+                     (page)="setPage($event)"
+                     [pageSizeOptions]="[10, 25, 50, 100]">
+      </mat-paginator>
+
+    </mat-card-content>
+  </td-layout-card-over>
+</td-layout-nav>
Index: src/app/setup/employee/employee.component.scss
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/app/setup/employee/employee.component.scss	(date 1516248711000)
+++ src/app/setup/employee/employee.component.scss	(date 1516248711000)
@@ -0,0 +1,137 @@
+:host /deep/ {
+  .btn-back{
+    position: absolute;
+    top: 0;
+    left: 0;
+  }
+
+  .mat-form-field-subscript-wrapper {
+    font-size: 70%;
+    margin-top: 0.54167em;
+    top: calc(100% - 1.96667em);
+  }
+
+  .container {
+    background-color: #e0e0e0;
+  }
+
+  .data-table {
+
+    .datatable-header:hover {
+      .datatable-header-cell {
+        border-right: 1px solid var(--divider-color);
+      }
+    }
+
+    datatable-selection {
+      //display: none;
+    }
+
+    .empty-row {
+      display: none;
+    }
+
+    & .datatable-scroll {
+      width: 100% !important;
+    }
+
+    .datatable-header {
+      border-top: 1px solid rgba(0, 0, 0, 0.12);
+      border-bottom: 1px solid rgba(0, 0, 0, 0.12);
+      background: #f5f5f5;
+      width: 100% !important;
+    }
+
+    .datatable-header-cell {
+      color: rgba(0, 0, 0, 0.54);
+      cursor: pointer;
+      outline: none;
+      font-size: 0.75rem;
+      padding: 8px 15px;
+      font-weight: 500;
+      text-align: left;
+
+      .sort-active {
+        color: rgba(0, 0, 0, 0.87) !important;
+      }
+
+      .text-center {
+        text-align: center;
+      }
+    }
+
+    .datatable-body-cell {
+      color: rgba(0, 0, 0, 0.54);
+      font-size: 13px;
+      line-height: 16px;
+      height: 48px;
+      padding: 0;
+      border-bottom: 1px solid rgba(0, 0, 0, 0.08);
+      white-space: nowrap;
+
+    }
+
+    .datatable-body .datatable-body-row {
+      outline: none;
+      :hover {
+        background: #eee;
+      }
+    }
+
+    .active {
+      background: transparent !important;
+    }
+
+    .datatable-header .resize-handle {
+      border-right: solid 1px #eee;
+    }
+
+    .text-truncate {
+      white-space: nowrap;
+      overflow: hidden;
+      text-overflow: ellipsis;
+      width: inherit;
+      position: relative;
+      z-index: 4;
+      padding: 10px 15px;
+      overflow: hidden;
+      text-overflow: ellipsis;
+      white-space: nowrap;
+    }
+
+  }
+
+  .search-bar {
+    background-color: #f5f5f5;
+    color: rgb(255, 255, 255);
+  }
+
+  td-search-box {
+    color: rgb(255, 255, 255);
+    display: block;
+    font-size: 16px;
+  }
+
+  .status-active {
+    color: #fff;
+    background: #009688 !important;
+    height: 24px;
+  }
+
+  .status-inactive {
+    background: #e0e0e0 !important;
+    height: 24px;
+  }
+
+  .link {
+    color: var(--accent-color);
+    cursor: pointer;
+  }
+
+  .link:hover {
+    text-decoration: underline;
+  }
+  .code-input {
+    width: 50px;
+  }
+}
Index: src/app/setup/employee/employee.component.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/app/setup/employee/employee.component.ts	(date 1516250185069)
+++ src/app/setup/employee/employee.component.ts	(date 1516250185069)
@@ -0,0 +1,185 @@
+import {Component, OnInit, ViewChild} from '@angular/core';
+import {MAT_DIALOG_DATA, MatDialog, MatSnackBar} from '@angular/material';
+import {Page} from '../../shared/model/page';
+import {Language} from 'angular-l10n';
+import {ConfirmComponent} from '../../dialog/confirm/confirm.component';
+import {TdLoadingService, TdMediaService} from '@covalent/core';
+import {SelectionModel} from '@angular/cdk/collections';
+import { LogsDialogComponent } from '../../dialog/logs-dialog/logs-dialog.component';
+import { Logs } from '../../dialog/logs-dialog/logs';
+import { LogsService } from '../../dialog/logs-dialog/logs.service';
+import {EmployeeTypeService} from './employee-type.service';
+import {EmployeeType} from './employee-type';
+import {EmployeeTypeDialogComponent} from './employee-type-dialog/employee-type-dialog.component';
+
+@Component({
+  selector: 'app-settings-item_type',
+  templateUrl: './employee.component.html',
+  styleUrls: ['./employee.component.scss'],
+  providers: [EmployeeTypeService, LogsService]
+})
+export class EmployeeComponent implements OnInit {
+  @Language() lang: string;
+  @ViewChild('dataTable') table: any;
+
+  loading: boolean = true;
+
+  page = new Page();
+  cache: any = {};
+  // expanded: any = {};
+
+  rows: any[] = [];
+  temp = [];
+
+  constructor(private _employeetypeService: EmployeeTypeService,
+              private _logService: LogsService,
+              public media: TdMediaService,
+              public snackBar: MatSnackBar,
+              private dialog: MatDialog) {
+
+    this.page.size = 20;
+    this.page.pageNumber = 0;
+
+  }
+  ngOnInit(): void {
+    this.load();
+  }
+
+  load() {
+    this.loading = true;
+    this._employeetypeService.requestData().subscribe((snapshot) => {
+      this._employeetypeService.rows = [];
+      snapshot.forEach((s) => {
+
+        const _row = new EmployeeType(s.val());
+        this._employeetypeService.rows.push(_row);
+
+      });
+
+      this.temp = [...this._employeetypeService.rows];
+      this.loading = false;
+      this.setPage(null);
+    });
+  }
+
+  setPage(pageInfo) {
+
+    if (pageInfo) {
+      this.page.pageNumber = pageInfo.pageIndex;
+      this.page.size = pageInfo.pageSize;
+    }
+
+    this._employeetypeService.getResults(this.page).subscribe((pagedData) => {
+      this.page = pagedData.page;
+      this.rows = pagedData.data;
+    });
+
+  }
+
+  addData() {
+    const dialogRef = this.dialog.open(EmployeeTypeDialogComponent, {
+      disableClose: true,
+      maxWidth: '100vw',
+      maxHeight: '100vw',
+      width: '75%'
+    });
+
+    dialogRef.afterClosed().subscribe((result: any) => {
+      if (result) {
+        // this.msgs = [];
+        // this.msgs.push({severity: 'success', detail: 'Data updated'});
+      }
+    });
+  }
+
+  editData(data: EmployeeType) {
+    const dialogRef = this.dialog.open(EmployeeTypeDialogComponent, {
+      disableClose: true,
+      maxWidth: '100vw',
+      maxHeight: '100vw',
+      width: '75%',
+      data
+    });
+
+    dialogRef.afterClosed().subscribe((result: any) => {
+      if (result) {
+        // this.msgs = [];
+        // this.msgs.push({severity: 'success', detail: 'Data updated'});
+      }
+    });
+  }
+
+  deleteData(data: EmployeeType) {
+    this.dialog.open(ConfirmComponent, {
+      data: {
+        type: 'delete',
+        title: 'Delete employee type',
+        content: 'Confirm to delete?',
+        data_title: 'Employee Type',
+        data: data.id.toString() + ' : ' + data.name1
+      }
+    }).afterClosed().subscribe((confirm: boolean) => {
+      if (confirm) {
+        this.snackBar.dismiss();
+        this._employeetypeService.removeData(data).then(() => {
+          this.snackBar.open('Delete employee type succeed.', '', {duration: 3000});
+          this.addLog('Delete', 'delete employee type succeed', data, {});
+
+        }).catch((err) => {
+          this.snackBar.open('Error : ' + err.message, '', {duration: 3000});
+        });
+      }
+    });
+  }
+
+  updateFilter(event) {
+    if (event === '') {
+      this.setPage(null);
+      return;
+    }
+
+    const val = event.target.value.toLowerCase();
+
+    // filter our data
+    const temp = this.temp.filter(function(d) {
+      return (d.id.toLowerCase().indexOf(val) !== -1) ||
+        (d.name1 && d.name1.toLowerCase().indexOf(val) !== -1) ||
+        (d.name2 && d.name2.toLowerCase().indexOf(val) !== -1)
+        || !val;
+    });
+
+    // update the rows
+    this.rows = temp;
+    // Whenever the filter changes, always go back to the first page
+    this.table.offset = 0;
+  }
+
+  openLogs(data: EmployeeType) {
+    this.dialog.open(LogsDialogComponent, {
+      disableClose: true,
+      maxWidth: '100vw',
+      width: '100%',
+      height: '100%',
+      data: {
+        menu: 'Employee Type',
+        path: this._employeetypeService.getPath(),
+        ref: data ? data.id : null
+      },
+    });
+  }
+
+  addLog(operation: string, description: string, data: any, old: any): void {
+    const log = new Logs({});
+    log.path = this._employeetypeService.getPath();
+    log.ref = data.code;
+    log.operation = operation;
+    log.description = description;
+    log.old_data = old;
+    log.new_data = data;
+    this._logService.addLog(this._employeetypeService.getPath(), log);
+  }
+
+  openLink(link: string) {
+    window.open(link, '_blank');
+  }
+}
Index: src/app/setup/workingtimesetting/workingtimesetting-type-dialog/workingtimesetting-type-dialog.component.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/app/setup/workingtimesetting/workingtimesetting-type-dialog/workingtimesetting-type-dialog.component.html	(date 1516248977803)
+++ src/app/setup/workingtimesetting/workingtimesetting-type-dialog/workingtimesetting-type-dialog.component.html	(date 1516248977803)
@@ -0,0 +1,266 @@
+<div align="center" style="vertical-align: inherit; padding: 10px;">
+  <form #dataForm="ngForm">
+    <div layout="row" align="center">
+      <!-- Col Left -->
+      <mat-card-content class="push-bottom-none" style="width: 50vw;margin: 10px;margin-bottom: 0px;">
+        <div layout="row">
+          <mat-form-field flex>
+            <input matInput
+                   #name1Element
+                   #name1Control="ngModel"
+                   placeholder="Name 1"
+                   [(ngModel)]="data.name1"
+                   name="name1"
+                   maxlength="250"
+                   required>
+            <mat-hint align="start">
+                <span [hidden]="name1Control.pristine" class="tc-red-600">
+                  <span [hidden]="!name1Control.hasError('required')">Required</span>
+                </span>
+            </mat-hint>
+            <mat-hint align="end">{{name1Element.value?.length || 0}} / 250</mat-hint>
+          </mat-form-field>
+        </div>
+
+        <div layout="row">
+          <mat-form-field flex>
+            <input matInput
+                   #name2Element
+                   #name2Control="ngModel"
+                   placeholder="Name 2"
+                   [(ngModel)]="data.name2"
+                   name="name2"
+                   maxlength="250">
+            <mat-hint align="start">
+              <span [hidden]="name2Control.pristine" class="tc-red-600">
+              <span [hidden]="!name2Control.hasError('required')">Required</span>
+              </span>
+            </mat-hint>
+            <mat-hint align="end">{{name2Element.value?.length || 0}} / 250</mat-hint>
+          </mat-form-field>
+        </div>
+
+        <div layout="row">
+          <mat-form-field flex>
+            <input matInput
+                   #name1Element
+                   #name1Control="ngModel"
+                   placeholder="Position"
+                   [(ngModel)]="data.position"
+                   name="position"
+                   maxlength="250"
+                   required>
+            <mat-hint align="start">
+                <span [hidden]="name1Control.pristine" class="tc-red-600">
+                  <span [hidden]="!name1Control.hasError('required')">Required</span>
+                </span>
+            </mat-hint>
+            <mat-hint align="end">{{name1Element.value?.length || 0}} / 250</mat-hint>
+          </mat-form-field>
+        </div>
+
+        <div layout="row">
+          <mat-form-field flex>
+            <input matInput
+                   #name1Element
+                   #name1Control="ngModel"
+                   placeholder="National ID"
+                   [(ngModel)]="data.nationalid"
+                   name="nationalid"
+                   maxlength="250"
+                   required>
+            <mat-hint align="start">
+                <span [hidden]="name1Control.pristine" class="tc-red-600">
+                  <span [hidden]="!name1Control.hasError('required')">Required</span>
+                </span>
+            </mat-hint>
+            <mat-hint align="end">{{name1Element.value?.length || 0}} / 250</mat-hint>
+          </mat-form-field>
+        </div>
+        <div layout="row">
+          <mat-form-field flex>
+            <mat-select placeholder="Level"
+                        #typeControl="ngModel"
+                        [ngModelOptions]="{standalone: true}"
+                        [(ngModel)]="data.level"
+                        required>
+              <mat-option value="1">1</mat-option>
+              <mat-option value="2">2</mat-option>
+              <mat-option value="3">3</mat-option>
+              <mat-option value="4">4</mat-option>
+              <mat-option value="5">5</mat-option>
+            </mat-select>
+            <mat-hint align="end">
+                <span [hidden]="typeControl.pristine" class="tc-red-600">
+                  <span [hidden]="!typeControl.hasError('required')">Required</span>
+                </span>
+            </mat-hint>
+          </mat-form-field>&nbsp;
+
+          <mat-form-field flex>
+            <mat-select placeholder="Holidays"
+                        #typeControl="ngModel"
+                        [ngModelOptions]="{standalone: true}"
+                        [(ngModel)]="data.holidays"
+                        required>
+              <mat-option value="11">11</mat-option>
+              <mat-option value="12">12</mat-option>
+              <mat-option value="13">13</mat-option>
+              <mat-option value="14">14</mat-option>
+              <mat-option value="15">15</mat-option>
+            </mat-select>
+            <mat-hint align="end">
+                <span [hidden]="typeControl.pristine" class="tc-red-600">
+                  <span [hidden]="!typeControl.hasError('required')">Required</span>
+                </span>
+            </mat-hint>
+          </mat-form-field>&nbsp;
+
+          <mat-form-field flex>
+            <mat-select placeholder="Vacations"
+                        #typeControl="ngModel"
+                        [ngModelOptions]="{standalone: true}"
+                        [(ngModel)]="data.vacations"
+                        required>
+              <mat-option value="8">7</mat-option>
+              <mat-option value="8">8</mat-option>
+              <mat-option value="9">9</mat-option>
+              <mat-option value="10">10</mat-option>
+              <mat-option value="11">11</mat-option>
+            </mat-select>
+            <mat-hint align="end">
+                <span [hidden]="typeControl.pristine" class="tc-red-600">
+                  <span [hidden]="!typeControl.hasError('required')">Required</span>
+                </span>
+            </mat-hint>
+          </mat-form-field>
+        </div>
+
+        <div layout="row">
+          <mat-form-field flex>
+            <input matInput
+                   #name1Element
+                   #name1Control="ngModel"
+                   placeholder="Address"
+                   [(ngModel)]="data.address"
+                   name="address"
+                   maxlength="250"
+                   required>
+            <mat-hint align="start">
+                <span [hidden]="name1Control.pristine" class="tc-red-600">
+                  <span [hidden]="!name1Control.hasError('required')">Required</span>
+                </span>
+            </mat-hint>
+            <mat-hint align="end">{{name1Element.value?.length || 0}} / 250</mat-hint>
+          </mat-form-field>
+        </div>
+
+      </mat-card-content>
+      <!-- End Col Left -->
+
+      <!-- Col Right -->
+      <mat-card-content class="push-bottom-none" style="width: 50vw;margin: 10px;margin-bottom: 0px;">
+        <div class="grid" style="text-align: center">
+          <div *ngFor="let image of images; let i = index">
+            <img height="200px" [src]="image.src" (click)="gallery.set(i)"/>
+          </div>
+        </div>
+        <div fxLayout="row" style="margin: 10px;text-align: center">
+          <span fxFlex></span>
+          <input #upload hidden accept="image/*" type="file" tdFileSelect (fileSelect)="uploadImage($event)">
+          <a mat-raised-button class="text-upper" color="primary" (click)="upload.click()">Upload</a>
+          <a mat-button class="text-upper" style="margin-left: 10px;" (click)="removeImage()" [disabled]="data.image === '../../../../../assets/images/placeholder.png'?true:false">Remove</a>
+          <span fxFlex></span>
+        </div>
+
+        <div layout="row" style="margin-top: 25px">
+          <mat-form-field style="width: 100px;margin: 10px;" flex>
+            <input matInput
+                   type="text"
+                   style="text-align: end;"
+                   #minimumElement
+                   #minimumControl="ngModel"
+                   placeholder="ID"
+                   [(ngModel)]="data.id"
+                   name="min"
+                   maxlength="4">
+            <mat-hint align="start">
+              <span [hidden]="minimumControl.pristine" class="tc-red-600">
+              <span [hidden]="!minimumControl.hasError('required')">Required</span>
+              </span>
+            </mat-hint>
+            <mat-hint align="end">{{minimumElement.value?.length || 0}} / 8</mat-hint>
+          </mat-form-field>
+
+          <mat-form-field style="width: 100px;margin: 10px;" flex>
+            <input matInput
+                   type="text"
+                   style="text-align: end;"
+                   #maximumElement
+                   #maximumControl="ngModel"
+                   placeholder="PIN"
+                   [(ngModel)]="data.pin"
+                   name="max"
+                   maxlength="6">
+            <mat-hint align="start">
+              <span [hidden]="maximumControl.pristine" class="tc-red-600">
+              <span [hidden]="!maximumControl.hasError('required')">Required</span>
+              </span>
+            </mat-hint>
+            <mat-hint align="end">{{maximumElement.value?.length || 0}} / 8</mat-hint>
+          </mat-form-field>
+        </div>
+
+      </mat-card-content>
+    </div>
+    <!-- End Col Right -->
+
+    <!-- Unit -->
+    <!--<div layout="row" align="center">
+      <mat-card-content class="push-bottom-none" style="width: 50vw;margin: 10px;margin-top: 0px;">
+        <div layout="row">
+          <mat-form-field flex>
+            <mat-select placeholder="Primary Unit"
+                        #primaryUnitControl="ngModel"
+                        [ngModelOptions]="{standalone: true}"
+                        [(ngModel)]="data.primary_unit" (change)="changePrimaryUnit(data.primary_unit)">
+              <mat-option *ngFor="let uom of uoms" [value]="uom.code">{{uom.code}} : {{uom.name1}} ({{uom.shortname}})</mat-option>
+            </mat-select>
+            <mat-hint align="start">
+              <span [hidden]="primaryUnitControl.pristine" class="tc-red-600">
+                <span [hidden]="!primaryUnitControl.hasError('required')">Required</span>
+              </span>
+            </mat-hint>
+          </mat-form-field>
+        </div>
+      </mat-card-content>
+
+      <mat-card-content class="push-bottom-none" style="width: 50vw;margin: 10px;margin-top: 0px;">
+        <div layout="row">
+          <mat-form-field flex>
+            <mat-select placeholder="Secondary Unit"
+                        #secondaryUnitControl="ngModel"
+                        [ngModelOptions]="{standalone: true}"
+                        [(ngModel)]="data.secondary_unit">
+              <mat-option *ngFor="let uom of uoms" [value]="uom.code">{{uom.code}} : {{uom.name1}} ({{uom.shortname}})</mat-option>
+            </mat-select>
+            <mat-hint align="start">
+                <span [hidden]="secondaryUnitControl.pristine" class="tc-red-600">
+                  <span [hidden]="!secondaryUnitControl.hasError('required')">Required</span>
+                </span>
+            </mat-hint>
+          </mat-form-field>
+        </div>
+      </mat-card-content>
+    </div>-->
+  </form>
+
+  <mat-divider style="margin:10px"></mat-divider>
+  <!-- Footer -->
+  <mat-card-footer style="margin: 0px 10px;align-content: center;">
+    <button mat-button class="text-upper" mat-dialog-close>Cancel</button>
+    <button mat-button class="text-upper" [disabled]="!dataForm.form.valid" color="primary"
+            (click)="saveData(dataForm.form)">Save
+    </button>
+  </mat-card-footer>
+</div>
Index: src/app/setup/workingtimesetting/workingtimesetting-type-dialog/workingtimesetting-type-dialog.component.scss
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/app/setup/workingtimesetting/workingtimesetting-type-dialog/workingtimesetting-type-dialog.component.scss	(date 1516248977803)
+++ src/app/setup/workingtimesetting/workingtimesetting-type-dialog/workingtimesetting-type-dialog.component.scss	(date 1516248977803)
@@ -0,0 +1,0 @@
Index: src/app/setup/workingtimesetting/workingtimesetting-type-dialog/workingtimesetting-type-dialog.component.spec.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/app/setup/workingtimesetting/workingtimesetting-type-dialog/workingtimesetting-type-dialog.component.spec.ts	(date 1516248977805)
+++ src/app/setup/workingtimesetting/workingtimesetting-type-dialog/workingtimesetting-type-dialog.component.spec.ts	(date 1516248977805)
@@ -0,0 +1,25 @@
+import { async, ComponentFixture, TestBed } from '@angular/core/testing';
+
+import { WorkingtimesettingTypeDialogComponent } from './workingtimesetting-type-dialog.component';
+
+describe('WorkingtimesettingTypeDialogComponent', () => {
+  let component: WorkingtimesettingTypeDialogComponent;
+  let fixture: ComponentFixture<WorkingtimesettingTypeDialogComponent>;
+
+  beforeEach(async(() => {
+    TestBed.configureTestingModule({
+      declarations: [ WorkingtimesettingTypeDialogComponent ]
+    })
+    .compileComponents();
+  }));
+
+  beforeEach(() => {
+    fixture = TestBed.createComponent(WorkingtimesettingTypeDialogComponent);
+    component = fixture.componentInstance;
+    fixture.detectChanges();
+  });
+
+  it('should create', () => {
+    expect(component).toBeTruthy();
+  });
+});
Index: src/app/setup/workingtimesetting/workingtimesetting-type-dialog/workingtimesetting-type-dialog.component.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/app/setup/workingtimesetting/workingtimesetting-type-dialog/workingtimesetting-type-dialog.component.ts	(date 1516248977807)
+++ src/app/setup/workingtimesetting/workingtimesetting-type-dialog/workingtimesetting-type-dialog.component.ts	(date 1516248977807)
@@ -0,0 +1,137 @@
+import {Component, Inject, OnInit} from '@angular/core';
+import {MAT_DIALOG_DATA, MatDialogRef, MatDialog, MatFormFieldModule} from '@angular/material';
+import {GalleryConfig, Gallery} from 'ng-gallery';
+import {Upload} from '../../../shared/model/upload';
+import {UploadService} from '../../../services/upload.service';
+import {Language} from 'angular-l10n';
+import {TdLoadingService} from '@covalent/core';
+import * as _ from 'lodash';
+import { FormControl } from '@angular/forms';
+import {WorkingTimeSettingType} from '../../workingtimesetting/workingtimesetting-type';
+import {WorkingtimesettingTypeService} from '../../workingtimesetting/workingtimesetting-type.service';
+
+@Component({
+  selector: 'app-workingtimesetting-dialog',
+  templateUrl: './workingtimesetting-type-dialog.component.html',
+  styleUrls: ['./workingtimesetting-type-dialog.component.scss'],
+  providers: [WorkingtimesettingTypeService, UploadService]
+})
+
+export class WorkingtimesettingTypeDialogComponent implements OnInit {
+  @Language() lang: string;
+  config: GalleryConfig;
+
+  data: WorkingTimeSettingType = new WorkingTimeSettingType({});
+  disableSelect = new FormControl(true);
+  error: any;
+  images = [];
+  storage_ref = '/main/settings/employee';
+
+  constructor(@Inject(MAT_DIALOG_DATA) public md_data: WorkingTimeSettingType,
+              private _workingtimesettingtypeService: WorkingtimesettingTypeService,
+              private _loadingService: TdLoadingService,
+              private _uploadService: UploadService,
+              public gallery: Gallery,
+              public dialogRef: MatDialogRef<WorkingtimesettingTypeDialogComponent>) {
+
+    try {
+      if (md_data) {
+        this.data = new WorkingTimeSettingType(md_data);
+        if (!this.data.image) {
+          this.displayImage('../../../../../assets/images/user.png');
+        } else {
+          this.displayImage(this.data.image);
+        }
+
+      } else {
+        this.displayImage('../../../../../assets/images/user.png');
+        this._workingtimesettingtypeService.requestData().subscribe(() => {
+          this.generateCode();
+        });
+      }
+    } catch (error) {
+      this.error = error;
+    }
+  }
+
+  ngOnInit(): void {
+  }
+  displayImage(path: string) {
+    this.images = [];
+    this.images.push({
+      src: path,
+      thumbnail: path,
+      text: this.data.checkin
+    });
+    this.gallery.load(this.images);
+  }
+  generateCode() {
+    this._loadingService.register('data.form');
+    // const prefix = 'TYPE';
+    // this.data.id = prefix + '1001';
+    this._workingtimesettingtypeService.requestLastData().subscribe((s) => {
+      s.forEach((ss: WorkingTimeSettingType) => {
+        console.log('Prev Code :' + ss.id);
+        // tslint:disable-next-line:radix
+        const str = parseInt(ss.id.substring(ss.id.length - 1, ss.id.length)) + 1;
+        const last = '' + str;
+
+        /*let last = prefix + '-' + str;
+
+        if (str < 100) {
+          last = prefix + '-0' + str;
+        }
+
+        if (str < 10) {
+          last = prefix + '-00' + str;
+        }*/
+
+        this.data.id = last;
+      });
+      this._loadingService.resolve('data.form');
+    });
+  }
+
+  saveData(form) {
+
+    if (form.valid) {
+
+      this.error = false;
+      this._loadingService.register();
+
+      this.data.checkin = form.value.checkin ? form.value.checkin : null;
+
+      if (this.md_data) {
+        if (_.isEqual(this.data, this.md_data)) {
+          this.dialogRef.close(false);
+        } else {
+          this._workingtimesettingtypeService.updateData(this.data).then(() => {
+            this.dialogRef.close(this.data);
+            this._loadingService.resolve();
+          }).catch((err) => {
+            this.error = err.message;
+            this._loadingService.resolve();
+          });
+        }
+      } else {
+        this._workingtimesettingtypeService.addData(this.data).then(() => {
+          this.dialogRef.close(this.data);
+          this._loadingService.resolve();
+        }).catch((err) => {
+          this.error = err.message;
+          this._loadingService.resolve();
+        });
+      }
+    }
+  }
+
+  disableSelectChange() {
+    this.data.disableSelect = this.disableSelect.value;
+    console.log('Func Active is : ' + this.data.disableSelect);
+  }
+
+  openLink(link: string) {
+    window.open(link, '_blank');
+  }
+
+}
Index: src/app/setup/workingtimesetting/workingtimesetting-type.service.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/app/setup/workingtimesetting/workingtimesetting-type.service.ts	(date 1516248977809)
+++ src/app/setup/workingtimesetting/workingtimesetting-type.service.ts	(date 1516248977809)
@@ -0,0 +1,75 @@
+import {Injectable} from '@angular/core';
+import {AngularFireDatabase, FirebaseListObservable} from 'angularfire2/database-deprecated';
+import {Page} from '../../shared/model/page';
+import {Observable} from 'rxjs';
+import {PagedData} from '../../shared/model/paged-data';
+import {WorkingTimeSettingType} from './workingtimesetting-type';
+
+@Injectable()
+export class WorkingtimesettingTypeService {
+
+  lists: FirebaseListObservable<any>;
+  rows: WorkingTimeSettingType[] = [];
+  _path: string = '/main/settings/workingtimesetting';
+
+  constructor(private agFb: AngularFireDatabase) {
+    this.lists = agFb.list(this._path, {preserveSnapshot: true});
+  }
+
+  getPath(): string {
+    return this._path;
+  }
+
+  requestData() {
+    return this.lists;
+  }
+
+  requestDataByCode(code: string) {
+    return this.agFb.object(this._path + '/' + code);
+  }
+
+  addData(data: WorkingTimeSettingType) {
+    return this.lists.update(data.code, data);
+  }
+
+  updateData(data: WorkingTimeSettingType) {
+    return this.lists.update(data.code, data);
+  }
+
+  updateDataStatus(data: WorkingTimeSettingType, active: boolean) {
+    return this.lists.update(data.code, {
+      disable: active
+    });
+  }
+
+  removeData(data: WorkingTimeSettingType) {
+    return this.lists.remove(data.code);
+  }
+
+  requestLastData() {
+    return this.agFb.list(this._path, {
+      query: {
+        limitToLast: 1
+      }
+    });
+  }
+
+  public getResults(page: Page): Observable<PagedData<WorkingTimeSettingType>> {
+    return Observable.of(this.rows).map((data) => this.getPagedData(page));
+  }
+
+  private getPagedData(page: Page): PagedData<WorkingTimeSettingType> {
+    const pagedData = new PagedData<WorkingTimeSettingType>();
+    page.totalElements = this.rows.length;
+    page.totalPages = page.totalElements / page.size;
+    const start = page.pageNumber * page.size;
+    const end = Math.min((start + page.size), page.totalElements);
+    for (let i = start; i < end; i++) {
+      const jsonObj = this.rows[i];
+      pagedData.data.push(new WorkingTimeSettingType(jsonObj));
+    }
+    pagedData.page = page;
+    return pagedData;
+  }
+
+}
Index: src/app/setup/workingtimesetting/workingtimesetting-type.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/app/setup/workingtimesetting/workingtimesetting-type.ts	(date 1516248977811)
+++ src/app/setup/workingtimesetting/workingtimesetting-type.ts	(date 1516248977811)
@@ -0,0 +1,14 @@
+export class WorkingTimeSettingType {
+  id?: string = 'N/A';
+  image? = '../../../../../assets/images/placeholder.png';
+  checkin?: string | null | undefined;
+  checkout?: string | null | undefined;
+  code?: string | null | undefined;
+  late?: string | null | undefined;
+  policy?: string | null | undefined;
+  disableSelect?: boolean = true;
+
+  constructor(params: WorkingTimeSettingType) {
+    Object.assign(this, params);
+  }
+}
Index: src/app/setup/workingtimesetting/workingtimesetting.component.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/app/setup/workingtimesetting/workingtimesetting.component.html	(date 1516248977812)
+++ src/app/setup/workingtimesetting/workingtimesetting.component.html	(date 1516248977812)
@@ -0,0 +1,151 @@
+<td-layout-nav toolbarTitle="Working Time Setting Type" class="container">
+  <button mat-icon-button td-menu-button mat-dialog-close>
+    <mat-icon>arrow_back</mat-icon>
+  </button>
+  <div td-toolbar-content layout="row" layout-align="start center" flex>
+    <span flex></span>
+    <td-search-box #searchBox (keyup)='updateFilter($event)' (clear)="updateFilter('')" backIcon="search"
+                   class="btn-icon" placeholder="Filter by any keyword" flex>
+    </td-search-box>
+
+    <span>
+        <a mat-icon-button mat-tooltip="History" class="btn-icon push-right-sm" (click)="openLogs(null)"><mat-icon>history</mat-icon></a>
+    </span>
+  </div>
+
+  <td-layout-card-over cardTitle="Working Time Setting Type Setup" cardSubtitle="">
+    <mat-divider></mat-divider>
+
+    <mat-card-actions>
+      <button mat-button class="text-upper" color="primary" (click)="addData()">
+        <mat-icon>add</mat-icon> Add</button>
+      <!--<button mat-button class="text-upper" color="warn">
+        <mat-icon>delete_forever</mat-icon> Delete</button>-->
+    </mat-card-actions>
+
+    <mat-card-content style="padding-top: 0px;">
+      <ngx-datatable
+        #dataTable
+        class="data-table"
+        [rows]="rows"
+        [columnMode]="'force'"
+        [headerHeight]="35"
+        [scrollbarH]="true"
+        [rowHeight]="'auto'"
+        [sorts]="[{prop: 'prop', dir: 'desc'}]"
+        [limit]="page.size"
+      >
+
+        <ngx-datatable-column name="No."
+                              [width]="25"
+                              [sortable]="false">
+          <ng-template let-rowIndex="rowIndex" let-row="row" ngx-datatable-cell-template>
+            <div style="text-align: left" class="text-truncate">
+              {{rowIndex+1}}.
+            </div>
+          </ng-template>
+        </ngx-datatable-column>
+
+        <ngx-datatable-column
+          prop="code"
+          name="Check In"
+          [minWidth]="50"
+          [width]="155">
+          <ng-template let-row="row" ngx-datatable-cell-template>
+            <div style="text-align: left" class="text-truncate">
+              <mat-select required
+              placeholder="{{row.checkin}}">
+                <mat-option value="00:00">00:00</mat-option>
+                <mat-option value="01:00">00:00</mat-option>
+                <mat-option value="02:00">00:00</mat-option>
+                <mat-option value="03:00">00:00</mat-option>
+                <mat-option value="04:00">00:00</mat-option>
+                <mat-option value="05:00">00:00</mat-option>
+                <mat-option value="06:00">00:00</mat-option>
+                <mat-option value="07:00">00:00</mat-option>
+                <mat-option value="08:00">00:00</mat-option>
+                <mat-option value="09:00">00:00</mat-option>
+                <mat-option value="10:00">00:00</mat-option>
+                <mat-option value="11:00">00:00</mat-option>
+                <mat-option value="12:00">00:00</mat-option>
+                <mat-option value="13:00">00:00</mat-option>
+                <mat-option value="14:00">00:00</mat-option>
+                <mat-option value="15:00">00:00</mat-option>
+                <mat-option value="16:00">00:00</mat-option>
+                <mat-option value="17:00">00:00</mat-option>
+                <mat-option value="18:00">00:00</mat-option>
+                <mat-option value="19:00">00:00</mat-option>
+                <mat-option value="20:00">00:00</mat-option>
+                <mat-option value="21:00">00:00</mat-option>
+                <mat-option value="22:00">00:00</mat-option>
+                <mat-option value="23:00">00:00</mat-option>
+              </mat-select>
+            </div>
+          </ng-template>
+        </ngx-datatable-column>
+
+        <ngx-datatable-column
+          prop="code"
+          name="Check Out"
+          [minWidth]="50"
+          [width]="155">
+          <ng-template let-row="row" ngx-datatable-cell-template>
+            <div style="text-align: left" class="text-truncate">
+              {{row.checkout}}
+            </div>
+          </ng-template>
+        </ngx-datatable-column>
+
+        <ngx-datatable-column
+          [width]="150"
+          [canAutoResize]="true"
+          prop="name1"
+          name="Late">
+          <ng-template let-row="row" ngx-datatable-cell-template>
+            <div style="text-align: left" class="text-truncate">
+              {{row.late}}
+            </div>
+          </ng-template>
+        </ngx-datatable-column>
+
+        <ngx-datatable-column
+          [width]="150"
+          [canAutoResize]="true"
+          prop="name2"
+          name="Position">
+          <ng-template let-row="row" ngx-datatable-cell-template>
+            <div style="text-align: left" class="text-truncate">
+              {{row.policy}}
+            </div>
+          </ng-template>
+        </ngx-datatable-column>
+
+        <ngx-datatable-column name="Action"
+                              [width]="100"
+                              [resizeable]="false"
+                              [sortable]="false">
+          <ng-template let-row="row" ngx-datatable-cell-template>
+            <div style="text-align: center;" fxLayout="row">
+              <button mat-icon-button class="" mat-tooltip="Delete" (click)="deleteData(row)">
+                <mat-icon>remove_circle_outline</mat-icon>
+              </button>
+            </div>
+          </ng-template>
+        </ngx-datatable-column>
+
+      </ngx-datatable>
+
+      <div class="mat-padding" *ngIf="rows?.length === 0 && !loading" layout="row" layout-align="center center">
+        <h3>No data to display.</h3>
+      </div>
+      <mat-paginator #paginator
+                     [length]="page.totalElements"
+                     [pageIndex]="page.pageNumber"
+                     [pageSize]="page.size"
+                     (page)="setPage($event)"
+                     [pageSizeOptions]="[10, 25, 50, 100]">
+      </mat-paginator>
+
+    </mat-card-content>
+  </td-layout-card-over>
+</td-layout-nav>
Index: src/app/setup/workingtimesetting/workingtimesetting.component.scss
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/app/setup/workingtimesetting/workingtimesetting.component.scss	(date 1516248977815)
+++ src/app/setup/workingtimesetting/workingtimesetting.component.scss	(date 1516248977815)
@@ -0,0 +1,137 @@
+:host /deep/ {
+  .btn-back{
+    position: absolute;
+    top: 0;
+    left: 0;
+  }
+
+  .mat-form-field-subscript-wrapper {
+    font-size: 70%;
+    margin-top: 0.54167em;
+    top: calc(100% - 1.96667em);
+  }
+
+  .container {
+    background-color: #e0e0e0;
+  }
+
+  .data-table {
+
+    .datatable-header:hover {
+      .datatable-header-cell {
+        border-right: 1px solid var(--divider-color);
+      }
+    }
+
+    datatable-selection {
+      //display: none;
+    }
+
+    .empty-row {
+      display: none;
+    }
+
+    & .datatable-scroll {
+      width: 100% !important;
+    }
+
+    .datatable-header {
+      border-top: 1px solid rgba(0, 0, 0, 0.12);
+      border-bottom: 1px solid rgba(0, 0, 0, 0.12);
+      background: #f5f5f5;
+      width: 100% !important;
+    }
+
+    .datatable-header-cell {
+      color: rgba(0, 0, 0, 0.54);
+      cursor: pointer;
+      outline: none;
+      font-size: 0.75rem;
+      padding: 8px 15px;
+      font-weight: 500;
+      text-align: left;
+
+      .sort-active {
+        color: rgba(0, 0, 0, 0.87) !important;
+      }
+
+      .text-center {
+        text-align: center;
+      }
+    }
+
+    .datatable-body-cell {
+      color: rgba(0, 0, 0, 0.54);
+      font-size: 13px;
+      line-height: 16px;
+      height: 48px;
+      padding: 0;
+      border-bottom: 1px solid rgba(0, 0, 0, 0.08);
+      white-space: nowrap;
+
+    }
+
+    .datatable-body .datatable-body-row {
+      outline: none;
+      :hover {
+        background: #eee;
+      }
+    }
+
+    .active {
+      background: transparent !important;
+    }
+
+    .datatable-header .resize-handle {
+      border-right: solid 1px #eee;
+    }
+
+    .text-truncate {
+      white-space: nowrap;
+      overflow: hidden;
+      text-overflow: ellipsis;
+      width: inherit;
+      position: relative;
+      z-index: 4;
+      padding: 10px 15px;
+      overflow: hidden;
+      text-overflow: ellipsis;
+      white-space: nowrap;
+    }
+
+  }
+
+  .search-bar {
+    background-color: #f5f5f5;
+    color: rgb(255, 255, 255);
+  }
+
+  td-search-box {
+    color: rgb(255, 255, 255);
+    display: block;
+    font-size: 16px;
+  }
+
+  .status-active {
+    color: #fff;
+    background: #009688 !important;
+    height: 24px;
+  }
+
+  .status-inactive {
+    background: #e0e0e0 !important;
+    height: 24px;
+  }
+
+  .link {
+    color: var(--accent-color);
+    cursor: pointer;
+  }
+
+  .link:hover {
+    text-decoration: underline;
+  }
+  .code-input {
+    width: 50px;
+  }
+}
Index: src/app/setup/workingtimesetting/workingtimesetting.component.spec.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/app/setup/workingtimesetting/workingtimesetting.component.spec.ts	(date 1516248977850)
+++ src/app/setup/workingtimesetting/workingtimesetting.component.spec.ts	(date 1516248977850)
@@ -0,0 +1,25 @@
+import { async, ComponentFixture, TestBed } from '@angular/core/testing';
+
+import { WorkingtimesettingComponent } from './workingtimesetting.component';
+
+describe('WorkingtimesettingComponent', () => {
+  let component: WorkingtimesettingComponent;
+  let fixture: ComponentFixture<WorkingtimesettingComponent>;
+
+  beforeEach(async(() => {
+    TestBed.configureTestingModule({
+      declarations: [ WorkingtimesettingComponent ]
+    })
+    .compileComponents();
+  }));
+
+  beforeEach(() => {
+    fixture = TestBed.createComponent(WorkingtimesettingComponent);
+    component = fixture.componentInstance;
+    fixture.detectChanges();
+  });
+
+  it('should create', () => {
+    expect(component).toBeTruthy();
+  });
+});
Index: src/app/setup/workingtimesetting/workingtimesetting.component.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/app/setup/workingtimesetting/workingtimesetting.component.ts	(date 1516248977818)
+++ src/app/setup/workingtimesetting/workingtimesetting.component.ts	(date 1516248977818)
@@ -0,0 +1,185 @@
+import {Component, OnInit, ViewChild} from '@angular/core';
+import {MAT_DIALOG_DATA, MatDialog, MatSnackBar} from '@angular/material';
+import {Page} from '../../shared/model/page';
+import {Language} from 'angular-l10n';
+import {ConfirmComponent} from '../../dialog/confirm/confirm.component';
+import {TdLoadingService, TdMediaService} from '@covalent/core';
+import {SelectionModel} from '@angular/cdk/collections';
+import { LogsDialogComponent } from '../../dialog/logs-dialog/logs-dialog.component';
+import { Logs } from '../../dialog/logs-dialog/logs';
+import { LogsService } from '../../dialog/logs-dialog/logs.service';
+import {WorkingtimesettingTypeService} from './workingtimesetting-type.service';
+import {WorkingTimeSettingType} from './workingtimesetting-type';
+import {WorkingtimesettingTypeDialogComponent} from './workingtimesetting-type-dialog/workingtimesetting-type-dialog.component';
+
+@Component({
+  selector: 'app-workingtimesetting',
+  templateUrl: './workingtimesetting.component.html',
+  styleUrls: ['./workingtimesetting.component.scss'],
+  providers: [WorkingtimesettingTypeService, LogsService]
+})
+export class WorkingtimesettingComponent implements OnInit {
+  @Language() lang: string;
+  @ViewChild('dataTable') table: any;
+
+  loading: boolean = true;
+
+  page = new Page();
+  cache: any = {};
+  expanded: any = {};
+
+  rows: any[] = [];
+  temp = [];
+
+  constructor(private _workingtimesettingtypeService: WorkingtimesettingTypeService,
+              private _logService: LogsService,
+              public media: TdMediaService,
+              public snackBar: MatSnackBar,
+              private dialog: MatDialog) {
+
+    this.page.size = 20;
+    this.page.pageNumber = 0;
+
+  }
+  ngOnInit(): void {
+    this.load();
+  }
+
+  load() {
+    this.loading = true;
+    this._workingtimesettingtypeService.requestData().subscribe((snapshot) => {
+      this._workingtimesettingtypeService.rows = [];
+      snapshot.forEach((s) => {
+
+        const _row = new WorkingTimeSettingType(s.val());
+        this._workingtimesettingtypeService.rows.push(_row);
+
+      });
+
+      this.temp = [...this._workingtimesettingtypeService.rows];
+      this.loading = false;
+      this.setPage(null);
+    });
+  }
+
+  setPage(pageInfo) {
+
+    if (pageInfo) {
+      this.page.pageNumber = pageInfo.pageIndex;
+      this.page.size = pageInfo.pageSize;
+    }
+
+    this._workingtimesettingtypeService.getResults(this.page).subscribe((pagedData) => {
+      this.page = pagedData.page;
+      this.rows = pagedData.data;
+    });
+
+  }
+
+  addData() {
+    const dialogRef = this.dialog.open(WorkingtimesettingTypeDialogComponent, {
+      disableClose: true,
+      maxWidth: '100vw',
+      maxHeight: '100vw',
+      width: '75%'
+    });
+
+    dialogRef.afterClosed().subscribe((result: any) => {
+      if (result) {
+        // this.msgs = [];
+        // this.msgs.push({severity: 'success', detail: 'Data updated'});
+      }
+    });
+  }
+
+  editData(data: WorkingTimeSettingType) {
+    const dialogRef = this.dialog.open(WorkingtimesettingTypeDialogComponent, {
+      disableClose: true,
+      maxWidth: '100vw',
+      maxHeight: '100vw',
+      width: '75%',
+      data
+    });
+
+    dialogRef.afterClosed().subscribe((result: any) => {
+      if (result) {
+        // this.msgs = [];
+        // this.msgs.push({severity: 'success', detail: 'Data updated'});
+      }
+    });
+  }
+
+  deleteData(data: WorkingTimeSettingType) {
+    this.dialog.open(ConfirmComponent, {
+      data: {
+        type: 'delete',
+        title: 'Delete Working Time Settine type',
+        content: 'Confirm to delete?',
+        data_title: 'Delete Working Time Settine Type',
+        data: data.id.toString() + ' : ' + data.checkin + '' + data.checkout
+      }
+    }).afterClosed().subscribe((confirm: boolean) => {
+      if (confirm) {
+        this.snackBar.dismiss();
+        this._workingtimesettingtypeService.removeData(data).then(() => {
+          this.snackBar.open('Delete workingtimesetting type succeed.', '', {duration: 3000});
+          this.addLog('Delete', 'delete workingtimesetting type succeed', data, {});
+
+        }).catch((err) => {
+          this.snackBar.open('Error : ' + err.message, '', {duration: 3000});
+        });
+      }
+    });
+  }
+
+  updateFilter(event) {
+    if (event === '') {
+      this.setPage(null);
+      return;
+    }
+
+    const val = event.target.value.toLowerCase();
+
+    // filter our data
+    const temp = this.temp.filter(function(d) {
+      return (d.code.toLowerCase().indexOf(val) !== -1) ||
+        (d.name1 && d.name1.toLowerCase().indexOf(val) !== -1) ||
+        (d.name2 && d.name2.toLowerCase().indexOf(val) !== -1)
+        || !val;
+    });
+
+    // update the rows
+    this.rows = temp;
+    // Whenever the filter changes, always go back to the first page
+    this.table.offset = 0;
+  }
+
+  openLogs(data: WorkingTimeSettingType) {
+    this.dialog.open(LogsDialogComponent, {
+      disableClose: true,
+      maxWidth: '100vw',
+      width: '100%',
+      height: '100%',
+      data: {
+        menu: 'Working Time Settine Type',
+        path: this._workingtimesettingtypeService.getPath(),
+        ref: data ? data.id : null
+      },
+    });
+  }
+
+  addLog(operation: string, description: string, data: any, old: any): void {
+    const log = new Logs({});
+    log.path = this._workingtimesettingtypeService.getPath();
+    log.ref = data.code;
+    log.operation = operation;
+    log.description = description;
+    log.old_data = old;
+    log.new_data = data;
+    this._logService.addLog(this._workingtimesettingtypeService.getPath(), log);
+  }
+
+  openLink(link: string) {
+    window.open(link, '_blank');
+  }
+}
Index: src/app/main/main.component.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/app/main/main.component.html	(date 1516248971000)
+++ src/app/main/main.component.html	(date 1516249842211)
@@ -57,7 +57,7 @@
           <div td-menu-header class="mat-subhead">Setup</div>
           <mat-nav-list dense>
             <!--<ng-template let-last="last" ngFor [ngForOf]="[0,1,2,3,4,5,6,7,8,9]">-->
-            <a mat-list-item>
+            <a mat-list-item (click)="openEmployeeProfile()">
               <h4 mat-line><span class="text-wrap">Employee Profile</span>
               </h4>
             </a>
@@ -105,6 +105,10 @@
               <!--<h4 mat-line><span class="text-wrap">Chart of Account</span>-->
               <!--</h4>-->
             <!--</a>-->
+            <a mat-list-item (click)="openWokingTimeSetting()">
+              <h4 mat-line><span class="text-wrap">Working Time Setting</span>
+              </h4>
+            </a>
 
             <!--Stop Menu-->
 
Index: src/app/main/main.component.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/app/main/main.component.ts	(date 1516248971000)
+++ src/app/main/main.component.ts	(date 1516249960276)
@@ -8,6 +8,7 @@
 import {UploadImageComponent} from '../dialog/upload-image/upload-image.component';
 import { LogsDialogComponent } from '../dialog/logs-dialog/logs-dialog.component';
 import { version as appVersion } from '../../../package.json';
+import * as firebase from 'firebase';
 
 // Import Settings Dialog Component
 import { ItemTypeComponent } from '../setup/item-type/item-type.component';
@@ -19,7 +20,7 @@
 import { DepartmentComponent } from '../setup/department/department.component';
 import { LocationComponent} from '../setup/location/location.component';
 import { EmployeeComponent} from '../setup/employee/employee.component';
-import * as firebase from 'firebase';
+import {WorkingtimesettingComponent} from '../setup/workingtimesetting/workingtimesetting.component';
 import {HolidaysComponent} from '../setup/holidays/holidays.component';
 import {CheckTimeComponent} from '../setup/check-time/check-time.component';
 
@@ -140,9 +141,8 @@
     });
   }
 
-  // Request Open Settings Dialog Component
-  openItemTypeDialog() {
-    const dialogRef = this.dialog.open(ItemTypeComponent, {
+  openEmployeeProfile() {
+    const dialogRef = this.dialog.open(EmployeeComponent, {
       disableClose: true,
       maxWidth: '100vw',
       width: '100%',
@@ -196,6 +196,22 @@
       width: '100%',
       height: '100%'
     });
+
+    dialogRef.afterClosed().subscribe((result: any) => {
+      if (result) {
+        // this.msgs = [];
+        // this.msgs.push({severity: 'success', detail: 'Data updated'});
+      }
+    });
+  }
+
+  openWokingTimeSetting() {
+    const dialogRef = this.dialog.open(WorkingtimesettingComponent, {
+      disableClose: true,
+      maxWidth: '100vw',
+      width: '100%',
+      height: '100%'
+    });
 
     dialogRef.afterClosed().subscribe((result: any) => {
       if (result) {
Index: src/app/setup/holidays/holidays.component.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/app/setup/holidays/holidays.component.html	(date 1516248971000)
+++ src/app/setup/holidays/holidays.component.html	(date 1516249132133)
@@ -1,14 +1,26 @@
-<td-layout-nav toolbarTitle="Holidays" class="container">
+<td-layout-nav toolbarTitle="Employee Type" class="container">
   <button mat-icon-button td-menu-button mat-dialog-close>
     <mat-icon>arrow_back</mat-icon>
   </button>
+  <div td-toolbar-content layout="row" layout-align="start center" flex>
+    <span flex></span>
+    <td-search-box #searchBox (keyup)='updateFilter($event)' (clear)="updateFilter('')" backIcon="search"
+                   class="btn-icon" placeholder="Filter by any keyword" flex>
+    </td-search-box>
 
-  <td-layout-card-over cardTitle="Holidays" cardSubtitle="">
+    <span>
+        <a mat-icon-button mat-tooltip="History" class="btn-icon push-right-sm" (click)="openLogs(null)"><mat-icon>history</mat-icon></a>
+    </span>
+  </div>
+
+  <td-layout-card-over cardTitle="Employee Type Setup" cardSubtitle="">
     <mat-divider></mat-divider>
 
     <mat-card-actions>
-      <button mat-button class="text-upper" color="primary" (click)="addHolidays()">
+      <button mat-button class="text-upper" color="primary" (click)="addData()">
         <mat-icon>add</mat-icon> Add</button>
+      <!--<button mat-button class="text-upper" color="warn">
+        <mat-icon>delete_forever</mat-icon> Delete</button>-->
     </mat-card-actions>
 
     <mat-card-content style="padding-top: 0px;">
@@ -35,10 +47,22 @@
         </ngx-datatable-column>
 
         <ngx-datatable-column
-          [width]="150"
-          [canAutoResize]="true"
-          prop="name1"
-          name="Description Name 1">
+          prop="code"
+          name="ID"
+          [minWidth]="50"
+          [width]="75">
+          <ng-template let-row="row" ngx-datatable-cell-template>
+            <div style="text-align: left" class="text-truncate">
+              {{row.id}}
+            </div>
+          </ng-template>
+        </ngx-datatable-column>
+
+        <ngx-datatable-column
+          prop="code"
+          name="Employee Name 1"
+          [minWidth]="50"
+          [width]="155">
           <ng-template let-row="row" ngx-datatable-cell-template>
             <div style="text-align: left" class="text-truncate">
               {{row.name1}}
@@ -49,8 +73,8 @@
         <ngx-datatable-column
           [width]="150"
           [canAutoResize]="true"
-          prop="name2"
-          name="Description Name 2">
+          prop="name1"
+          name="Employee Name 2">
           <ng-template let-row="row" ngx-datatable-cell-template>
             <div style="text-align: left" class="text-truncate">
               {{row.name2}}
@@ -62,10 +86,43 @@
           [width]="150"
           [canAutoResize]="true"
           prop="name2"
-          name="DD/MM/YY">
+          name="Position">
+          <ng-template let-row="row" ngx-datatable-cell-template>
+            <div style="text-align: left" class="text-truncate">
+              {{row.position}}
+            </div>
+          </ng-template>
+        </ngx-datatable-column>
+
+        <ngx-datatable-column
+          [width]="30"
+          prop="disable"
+          name="Level">
           <ng-template let-row="row" ngx-datatable-cell-template>
             <div style="text-align: left" class="text-truncate">
-              {{row.date | date:'dd/MM/yy'}}
+              {{row.level}}
+            </div>
+          </ng-template>
+        </ngx-datatable-column>
+
+        <ngx-datatable-column
+          [width]="50"
+          prop="disable"
+          name="Holidays">
+          <ng-template let-row="row" ngx-datatable-cell-template>
+            <div style="text-align: left" class="text-truncate">
+              {{row.holidays}}
+            </div>
+          </ng-template>
+        </ngx-datatable-column>
+
+        <ngx-datatable-column
+          [width]="50"
+          prop="disable"
+          name="Vacations">
+          <ng-template let-row="row" ngx-datatable-cell-template>
+            <div style="text-align: left" class="text-truncate">
+              {{row.vacations}}
             </div>
           </ng-template>
         </ngx-datatable-column>
@@ -79,7 +136,7 @@
               <button mat-icon-button mat-tooltip="Edit" class="" (click)="editData(row)">
                 <mat-icon>edit</mat-icon>
               </button>
-              <button mat-icon-button mat-tooltip="Delete" class="" (click)="deleteData(row)" >
+              <button mat-icon-button class="" mat-tooltip="Delete" (click)="deleteData(row)">
                 <mat-icon>remove_circle_outline</mat-icon>
               </button>
             </div>
Index: src/app/app.module.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/app/app.module.ts	(date 1516248971000)
+++ src/app/app.module.ts	(date 1516249033335)
@@ -52,6 +52,10 @@
 import { ItemSubGroupDialogComponent } from './setup/item-sub-group/item-sub-group-dialog/item-sub-group-dialog.component';
 import { ItemComponent } from './setup/item/item.component';
 import { ItemDialogComponent } from './setup/item/item-dialog/item-dialog.component';
+import { EmployeeComponent } from './setup/employee/employee.component';
+import { EmployeeTypeDialogComponent } from './setup/employee/employee-type-dialog/employee-type-dialog.component';
+import { WorkingtimesettingComponent } from './setup/workingtimesetting/workingtimesetting.component';
+import { WorkingtimesettingTypeDialogComponent } from './setup/workingtimesetting/workingtimesetting-type-dialog/workingtimesetting-type-dialog.component';
 import { HolidaysComponent } from './setup/holidays/holidays.component';
 import { HolidaysDialogComponent } from './setup/holidays/holidays-dialog/holidays-dialog.component';
 import { CheckTimeComponent } from './setup/check-time/check-time.component';
@@ -94,6 +98,10 @@
     ItemSubGroupDialogComponent,
     ItemComponent,
     ItemDialogComponent,
+    EmployeeComponent,
+    EmployeeTypeDialogComponent,
+    WorkingtimesettingComponent,
+    WorkingtimesettingTypeDialogComponent,
     HolidaysComponent,
     HolidaysDialogComponent,
     CheckTimeComponent,
@@ -135,6 +143,10 @@
     ItemSubGroupDialogComponent,
     ItemComponent,
     ItemDialogComponent,
+    EmployeeComponent,
+    EmployeeTypeDialogComponent,
+    WorkingtimesettingComponent,
+    WorkingtimesettingTypeDialogComponent,
     HolidaysComponent,
     HolidaysDialogComponent,
     CheckTimeComponent,
